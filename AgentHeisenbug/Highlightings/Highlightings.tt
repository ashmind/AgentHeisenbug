<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using JetBrains.Annotations;
using JetBrains.ReSharper.Daemon;
using JetBrains.ReSharper.Psi.CSharp;
using JetBrains.ReSharper.Psi.Tree;
using AgentHeisenbug.Highlightings;

<# var model = new Dictionary<string, string> {
    { "CallToNotThreadSafeStaticMethodInThreadSafeType", "Call to static method that is not thread-safe from type annotated with [ThreadSafe]" },
    { "MutableFieldOrPropertyInThreadSafeType",          "Mutable property or field in type annotated with [ThreadSafe]" },
    { "ExposingNotThreadSafeTypeInThreadSafeType",       "Exposing type that is not thread-safe from type annotated with [ThreadSafe]" },
    
    { "MutableFieldInReadOnlyType",                      "Mutable field in type annotated with [ReadOnly]" }
}; #>

<# foreach (var pair in model) { #>
[assembly: RegisterConfigurableSeverity(
    <#= pair.Key #>.Id,
    null,
    HighlightingGroupIds.ConstraintViolation,
    "<#= pair.Value #>",
    "<#= pair.Value #>",
    Severity.WARNING,
    false
)]
<# } #>

namespace AgentHeisenbug.Highlightings {<# foreach (var pair in model) { #>

    [ConfigurableSeverityHighlighting(<#= pair.Key #>.Id, CSharpLanguage.Name)]
    public class <#= pair.Key #> : ThreadSafetyHighligtingBase {
        public const string Id = "<#= pair.Key #>";

        [StringFormatMethod("messageFormat")]
        public <#= pair.Key #>(ITreeNode element, string messageFormat, params object[] args) : base(element, messageFormat, args) {}
    }
<# } #>}