<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using JetBrains.ReSharper.Daemon;
using JetBrains.ReSharper.Psi.CSharp;
using JetBrains.ReSharper.Psi.Tree;
using AgentHeisenbug.Highlightings;

<# var models = new List<Model> {
    new Model(
        "CallToNotThreadSafeStaticMethodInThreadSafeType",
        "Call to static method that is not thread-safe from type annotated with [ThreadSafe]",
        "Method '{0}' is not declared to be thread-safe.",
        "string methodName"
    ),

    new Model(
        "MutableFieldInThreadSafeType",
        "Mutable field in type annotated with [ThreadSafe]",
        "Field '{0}' in a [ThreadSafe] class should be readonly.",
        "string fieldName"
    ),

    new Model(
        "MutableAutoPropertyInThreadSafeType",
        "Mutable auto property in type annotated with [ThreadSafe]",
        "Setter of auto property '{0}' in a [ThreadSafe] class should be private.",
        "string propertyName"
    ),

    new Model(
        "AutoPropertyAssignmentOutsideOfConstructorInThreadSafeType",
        "Auto property assigned outside of constructor in type annotated with [ThreadSafe]",
        "{1}auto property '{0}' in a [ThreadSafe] class should only be assigned in a {1}constructor.",
        "string propertyName, string @static"
    ),

    new Model(
        "FieldOfNonThreadSafeTypeInThreadSafeType",
        "Field of type that is not thread-safe, in type annotated with [ThreadSafe]",
        "Type '{1}' of field '{0}' in a [ThreadSafe] type should be thread-safe.",
        "string fieldName, string typeName"
    ),

    new Model(
        "AutoPropertyOfNonThreadSafeTypeInThreadSafeType",
        "Auto property of type that is not thread-safe, in type annotated with [ThreadSafe]",
        "Type '{1}' of auto property '{0}' in a [ThreadSafe] type should be thread-safe.",
        "string propertyName, string typeName"
    ),

    new Model(
        "MutableFieldInReadOnlyType",
        "Mutable field in type annotated with [ReadOnly]",
        "Field '{0}' in a [ThreadSafe] class should be readonly.",
        "string fieldName"
    ),

    new Model(
        "FieldOfMutableTypeInReadOnlyType",
        "Field of mutable type in type annotated with [ReadOnly]",
        "Type '{1}' of field '{0}' in a [ReadOnly] type should be read only.",
        "string fieldName, string typeName"
    )
}; #>

<# foreach (var model in models) { #>
[assembly: RegisterConfigurableSeverity(
    <#= model.Id #>.Id,
    null,
    HighlightingGroupIds.ConstraintViolation,
    "<#= model.Description #>",
    "<#= model.Description #>",
    Severity.WARNING,
    false
)]
<# } #>

namespace AgentHeisenbug.Highlightings {<# foreach (var model in models) { #>

    [ConfigurableSeverityHighlighting(<#= model.Id #>.Id, CSharpLanguage.Name)]
    public class <#= model.Id #> : HeisenbugHighligtingBase {
        public const string Id = "<#= model.Id #>";

        public <#= model.Id #>(ITreeNode element, <#= model.Arguments #>) : base(
            element,
            "<#= model.MessageFormat #>",
            <#= Regex.Replace(model.Arguments, @"(?<=(?:^|,)\s*)\S+\s+", "") #>
        ) {}
    }
<# } #>}

<#+
private class Model {
    public string Id { get; private set; }
    public string Description { get; private set; }
    public string MessageFormat { get; private set; }
    public string Arguments { get; private set; }

    public Model(string id, string description, string messageFormat, string arguments) {
        this.Id = id;
        this.Description = description;
        this.MessageFormat = messageFormat;
        this.Arguments = arguments;
    }
}
#>