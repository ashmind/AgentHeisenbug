<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using JetBrains.Annotations;
using JetBrains.ReSharper.Daemon;
using JetBrains.ReSharper.Psi.CSharp;
using JetBrains.ReSharper.Psi.Tree;
using AgentHeisenbug.Highlightings.ReadOnly;
using AgentHeisenbug.Highlightings.ThreadSafe;

// ReSharper disable PartialTypeWithSinglePart

<# var models = new List<Model> {
    new Model(
        "ThreadSafeInterfaceInNonThreadSafeType",
        "Thread-safe interface implemented by type that is not annotated with [ThreadSafe]",
        "Base interface '{0}' is thread-safe, but type '{1}' is not annotated with [ThreadSafe].",
        "string interfaceName, string typeName"
    ),

    new Model(
        "ThreadSafeBaseClassInNonThreadSafeClass",
        "Thread-safe base class in class not annotated with [ThreadSafe]",
        "Base class '{0}' is thread-safe, but class '{1}' is not annotated with [ThreadSafe].",
        "string baseClassName, string typeName"
    ),
    
    new Model(
        "NonThreadSafeBaseClassInThreadSafeClass",
        "Non-readonly base class in class annotated with [ReadOnly]",
        "Base class '{0}' is not thread-safe, but class '{1}' is annotated with [ThreadSafe].",
        "string baseClassName, string typeName"
    ),

    new Model(
        "AccessToNonThreadSafeStaticMemberInThreadSafeType",
        "Access to static member that is not thread-safe from type annotated with [ThreadSafe]",
        "{0} '{1}' is not declared to be thread-safe.",
        "string memberKind, string memberName"
    ),

    new Model(
        "MutableFieldInThreadSafeType",
        "Mutable field in type annotated with [ThreadSafe]",
        "Field '{0}' in a [ThreadSafe] class should be readonly.",
        "string fieldName"
    ),

    new Model(
        "FieldOfNonThreadSafeTypeInThreadSafeType",
        "Field using type that is not thread-safe in type annotated with [ThreadSafe]",
        "Type '{1}' used by field '{0}' in a [ThreadSafe] type should be thread-safe.",
        "string fieldName, string typeName"
    ),

    new Model(
        "MutableAutoPropertyInThreadSafeType",
        "Mutable auto property in type annotated with [ThreadSafe]",
        "Setter of auto property '{0}' in a [ThreadSafe] class should be private.",
        "string propertyName",
        manualConstructor: false
    ),

    new Model(
        "AutoPropertyOfNonThreadSafeTypeInThreadSafeType",
        "Auto property using type that is not thread-safe in type annotated with [ThreadSafe]",
        "Type '{1}' used by auto property '{0}' in a [ThreadSafe] type should be thread-safe.",
        "string propertyName, string typeName"
    ),

    new Model(
        "AutoPropertyAssignmentOutsideOfConstructorInThreadSafeType",
        "Auto property assigned outside of constructor in type annotated with [ThreadSafe]",
        "{1}auto property '{0}' in a [ThreadSafe] class should only be assigned in a {1}constructor.",
        "string propertyName, string @static",
        manualConstructor: false
    ),

    new Model(
        "ParameterOfNonThreadSafeTypeInThreadSafeMethod",
        "Parameter using type that is not thread-safe in a thread-safe method",
        "Type '{1}' used by parameter '{0}' in a thread-safe method should be thread-safe unless method is [Pure].",
        "string parameterName, string typeName"
    ),
    
    new Model(
        "NonReadOnlyBaseClassInReadOnlyClass",
        "Non-readonly base class in class annotated with [ReadOnly]",
        "Base class '{0}' is not readonly, but class '{1}' is annotated with [ReadOnly]",
        "string baseClassName, string typeName"
    ),

    new Model(
        "MutableFieldInReadOnlyType",
        "Mutable field in type annotated with [ReadOnly]",
        "Field '{0}' in a [ReadOnly] type should be readonly.",
        "string fieldName"
    ),

    new Model(
        "FieldOfNonReadOnlyTypeInReadOnlyType",
        "Field using mutable type in type annotated with [ReadOnly]",
        "Type '{1}' used by field '{0}' in a [ReadOnly] type should be readonly.",
        "string fieldName, string typeName"
    ),

    new Model(
        "MutableAutoPropertyInReadOnlyType",
        "Mutable auto property in type annotated with [ReadOnly]",
        "Setter of auto property '{0}' in a [ReadOnly] class should be private.",
        "string propertyName",
        manualConstructor: false
    ),

    new Model(
        "AutoPropertyOfNonReadOnlyTypeInReadOnlyType",
        "Auto property using type that is not readonly in type annotated with [ReadOnly]",
        "Type '{1}' used by auto property '{0}' in a [ReadOnly] type should be readonly.",
        "string propertyName, string typeName"
    ),

    new Model(
        "AutoPropertyAssignmentOutsideOfConstructorInReadOnlyType",
        "Auto property assigned outside of constructor in type annotated with [ReadOnly]",
        "{1}auto property '{0}' in a [ReadOnly] class should only be assigned in a {1}constructor.",
        "string propertyName, string @static",
        manualConstructor: false
    )
}; #>

<# foreach (var model in models) { #>
[assembly: RegisterConfigurableSeverity(
    <#= model.Id #>.Id,
    null,
    HighlightingGroupIds.ConstraintViolation,
    "<#= model.Description #>",
    "<#= model.Description #>",
    Severity.WARNING,
    false
)]
<# } #>

<# foreach (var model in models) { #>

namespace AgentHeisenbug.Highlightings.<#= model.Namespace #> {
    [ConfigurableSeverityHighlighting(<#= model.Id #>.Id, CSharpLanguage.Name)]
    public partial class <#= model.Id #> : HeisenbugHighligtingBase {
        public const string Id = "AgentHeisenbug.<#= model.Id #>";

        <#= model.ManualConstructor ? "private" : "public" #> <#= model.Id #>([NotNull] ITreeNode element, <#= model.ArgumentsDefinition #>) : base(
            element,
            "<#= model.MessageFormat #>",
            <#= model.Arguments #>
        ) {}
    }
}
<# } #>

<#+
private class Model {
    public string Namespace { get; private set; }
    public string Id { get; private set; }
    public string Description { get; private set; }
    public string MessageFormat { get; private set; }
    public string ArgumentsDefinition { get; private set; }
    public string Arguments { get; private set; }
    public bool ManualConstructor { get; private set; }

    public Model(string id, string description, string messageFormat, string argumentsDefinition, bool manualConstructor = true) {
        this.Id = id;
        this.Description = description;
        this.MessageFormat = messageFormat;
        this.ArgumentsDefinition = argumentsDefinition;        
        this.ManualConstructor = manualConstructor;

        this.Arguments = Regex.Replace(argumentsDefinition, @"(?<=(?:^|,)\s*)\S+\s+", "");
        this.Namespace = Regex.Match(id, "ReadOnly|ThreadSafe").Value;
    }
}
#>